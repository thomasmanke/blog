{
  "hash": "269d0be05331861dd7cc1b422b9bdb63",
  "result": {
    "markdown": "---\ntitle: \"Word Clouds with R\"\ndate: 2023/06/15\ndate-modified: last-modified\ncategories: \n  - word cloud\n  - text analysis\n  - web scraping\n\nimage: wordcloud.png\n\nformat:\n  html: default\n  revealjs: \n    output-file: revealjs.html\n---\n\n\n# Setup\n\n\n::: {.cell hash='wordCloud_cache/html/setup_2bc20a603e1e6208fcc97421ff48980e'}\n\n```{.r .cell-code}\n# define libraries\nlibrary(tidyverse)\nlibrary(wordcloud)\nrequire(RColorBrewer)\nrequire(stopwords)\n\n# get data\nurl <- \"http://cran.r-project.org/web/packages/available_packages_by_date.html\" \nhtml <- rvest::read_html(url)  # harvest url\ndf <- rvest::html_table(html)  # turn into dataframe\nhead(df[[1]],3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 Ã— 3\n  Date       Package Title                                                      \n  <chr>      <chr>   <chr>                                                      \n1 2023-06-15 arealDB Harmonise and Integrate Heterogeneous Areal Data           \n2 2023-06-15 arrow   Integration to 'Apache' 'Arrow'                            \n3 2023-06-15 caresid Correspondence Analysis Plot and Associations Visualisation\n```\n:::\n\n```{.r .cell-code}\nsw <- stopwords::stopwords(\"english\") # define stopwords\nhead(sw,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"i\"  \"me\" \"my\"\n```\n:::\n:::\n\n\n# Word frequencies\n\nNext we extract the word frequencies as table\n\n\n::: {.cell hash='wordCloud_cache/html/word_frequencies_1327ac923265e2fbc803c7a967140824'}\n\n```{.r .cell-code}\nntop <- 100\nword_freq <- df[[1]] %>% \n  pull(Title) %>% \n  stringi::stri_extract_all_words() %>% \n  unlist() %>% \n  tolower() %>%\n  # exclude stopwords in sw. equivalent: words = words[!words %in% sw]\n  .[!. %in% sw] %>%\n  table()\n\nsort(word_freq) %>% tail(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.\n   using        r   models analysis     data \n     917     1333     1417     2025     3223 \n```\n:::\n:::\n\n\n# Word Cloud\n\n\n::: {.cell hash='wordCloud_cache/html/fig-wordcloud_3335f1c734132d90d56891474976add7'}\n\n```{.r .cell-code}\nwordcloud( \n  names(word_freq), \n  word_freq, \n#  scale=c(8,.2), \n  min.freq=3, \n  max.words=100, \n  random.order=FALSE, \n  rot.per=.15, \n  colors=brewer.pal(8,\"Dark2\") \n)\n\n\npp = recordPlot()    # record the plot\n# the size and resolution for the png required some iterative optimization\npng(\"wordcloud.png\", width=300, height=300, res=75) \nreplayPlot(pp)       # replay the plot in png device\ndo <- dev.off()\n```\n\n::: {.cell-output-display}\n![WorldCloud for CRAN packages](wordCloud_files/figure-html/fig-wordcloud-1.png){#fig-wordcloud width=672}\n:::\n:::\n\n\n# Using tm\n\nFor some of the common text manipulation (punctuation, stopword removal etc) we could also use specific packages, e.g. tm.\n\n\n::: {.cell hash='wordCloud_cache/html/tm_9357a4f1f60b1a0b4d6a8e84230a0de7'}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}