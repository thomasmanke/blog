{
  "hash": "621b7514e28f7697ba5abfe5f28d9d6c",
  "result": {
    "markdown": "---\ntitle: Buffon's Needle\ndate: 2023/07/01\ndate-modified: last-modified\ncategories: \n  - PI\n  - shinylive\n  - simulation\n  \nimage: Buffon.png\n\nformat: html\nfilters:\n  - shinylive\n---\n\n## Idea\n\n## Simulation\n\nHere I simulate Buffon's Needle Problem (Comte de Buffon: 1707 - 1788) using `shinylive` and its quarto extension. This package allows to generate html that can run shiny code on the client side (and without the need for a dedicated shiny server).\n\n``` {shinylive-python}\n#| standalone: true\n#| components: [viewer, editor]\n#| code-folding: true\n#| layout: vertical\n#| viewerHeight: 420\n\n## file: app.py\nfrom shiny import App, reactive, render, ui\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom my_plots import plotHist, plotNeedles\nfrom my_calcs import simulateNeedles\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_numeric(\"N\", \"Needles\", 10, min = 2, max = 1e7),\n            ui.input_numeric(\"NR\",\"Replicates=\", 1, min = 1, max = 1000),\n            ui.input_action_button(\"update\", \"Update\", class_=\"btn-success\"),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"Buffon\"),\n        ),\n    ),\n)\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"Buffon\")\n    @reactive.event(input.update, ignore_none=False)\n    def Buffon():\n        N=input.N()         # number of needles\n        NR=input.NR()       # number of replicates\n     \n        x0,x1,y0,y1 = simulateNeedles(N*NR)   # simulate  N needles thrown NR times\n        cross = np.floor(x0) != np.floor(x1)  # cross=TRUE if line crossing\n        \n        # interpret N*NR needles as N needles thrown NR times (simulate)\n        cross_r = np.reshape(cross,(N, NR))    # reshape: rows=needles columns=replicates\n        Nc = np.sum(cross_r, axis=0)           # number of crossings (per replicate) (R: colSum(cross))\n        ratio = N / Nc                         # ratios for all replicate\n\n        plt.figure(figsize=(10, 5))\n        plt.subplot(1, 2, 1)\n        plotNeedles(x0,x1,y0,y1,cross, N)\n        \n        plt.subplot(1, 2, 2)\n        plotHist(ratio)\n\n        plt.tight_layout()\n        plt.show()\n\napp = App(app_ui, server)\n\n## file: my_calcs.py\nimport numpy as np\n\ndef simulateNeedles(n):\n  # simulate n random start coordinates (x0,y0) and N random angles\n  # notice that for the problem y0,y1 are irrelevant, but distribution across y helps visualization\n  x0 = np.random.uniform(low=0.0, high=3.0, size=n)\n  y0 = np.random.uniform(low=1.0, high=3.0, size=n)\n  alpha = np.random.uniform(low=0.0, high=np.pi, size=n)    \n\n  # calculate end coordinates (x1,y1)\n  x1=x0 + 0.5*np.cos(alpha)\n  y1=y0 + 0.5*np.sin(alpha)\n\n  return x0,x1,y0,y1\n  \n## file: my_plots.py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef plotHist(ratio):\n  # Plot the histogram over all replicate trials, ratio is a vector of length NR\n\n  ratio_finite = ratio[np.isfinite(ratio)]\n  plt.hist(ratio_finite, color='green', edgecolor='black')\n  plt.axvline(np.pi, color='red', linewidth=2)\n  plt.xlabel(\"N/Nc\")\n  plt.ylabel(\"Frequency\")\n  plt.title(\"Histogram of N/Nc\")\n\n  \ndef plotNeedles(x0,x1,y0,y1,cross,N):\n  Nc = np.sum(cross[:N])          # _calculate_ number of crossing for N needles (first replicate) \n  title = \"N={} Nc={} --> N/Nc={}\".format(N, Nc, round(N/Nc, 4))\n  plt.plot()\n  plt.xlim(-1, 4)\n  plt.ylim(0, 4)\n  plt.xlabel(\"x\")\n  plt.ylabel(\"y\")\n  plt.vlines(np.arange(0, 11), ymin=0, ymax=4, colors='gray')\n  plt.title(title)\n  \n  Nmax = min(N, 1000)                                      # _plot_ at most 1000 needles\n  colors = ['red' if c else 'blue' for c in cross[:Nmax]]  # plot crossing lines 'red'\n  for i in range(Nmax):\n    plt.plot([x0[i], x1[i]], [y0[i], y1[i]], color=colors[i])\n```\n\n## References\n\n-   [Wikipedia](https://en.wikipedia.org/wiki/Buffon%27s_needle_problem)\n-   [shinylive github](https://github.com/quarto-ext/shinylive)\n-   [shinylive.io](https://shinylive.io/py/examples/)\n\n::: {.callout-tip collapse=\"true\"}\n#### watermark\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport watermark\nimport pkg_resources\n\n#import os\n#print(\"Local variables:\", locals())\n#print(\"Global variables:\", globals())\n\n# Display watermark information\nprint(watermark.watermark())\n\n# Get installed module versions\ninstalled_packages = pkg_resources.working_set\n\n# Print module versions\nprint(\"Installed Packages:\")\nfor package in installed_packages:\n    print(package.key, package.version)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLast updated: 2023-07-01T19:09:02.155829+02:00\n\nPython implementation: CPython\nPython version       : 3.11.4\nIPython version      : 8.12.0\n\nCompiler    : Clang 15.0.7 \nOS          : Darwin\nRelease     : 21.6.0\nMachine     : x86_64\nProcessor   : i386\nCPU cores   : 8\nArchitecture: 64bit\n\nInstalled Packages:\njinja2 3.1.2\nmarkupsafe 2.1.2\npillow 9.4.0\npyqt5 5.15.7\npyqt5-sip 12.11.0\npysocks 1.7.1\npyyaml 6.0\npygments 2.14.0\nqtpy 2.3.1\nsqlalchemy 2.0.16\nsend2trash 1.8.0\naltair 5.0.1\nanyio 3.6.2\nappdirs 1.4.4\nappnope 0.1.3\nargon2-cffi 21.3.0\nargon2-cffi-bindings 21.2.0\nasgiref 3.7.2\nasttokens 2.2.1\nattrs 22.2.0\nbackcall 0.2.0\nbackports.functools-lru-cache 1.6.4\nbeautifulsoup4 4.12.0\nbleach 6.0.0\nbrotlipy 0.7.0\ncertifi 2023.5.7\ncffi 1.15.1\ncharset-normalizer 3.1.0\nclick 8.1.3\ncomm 0.1.3\ncontextvars 2.4\ncontourpy 1.0.7\ncryptography 40.0.1\ncycler 0.11.0\ndebugpy 1.6.6\ndecorator 5.1.1\ndefusedxml 0.7.1\nentrypoints 0.4\nexecuting 1.2.0\nfastjsonschema 2.16.3\nflit-core 3.8.0\nfonttools 4.39.3\ngreenlet 2.0.2\nh11 0.14.0\nhtmltools 0.2.1\nidna 3.4\nimmutables 0.19\nimportlib-metadata 6.1.0\nimportlib-resources 5.12.0\nipykernel 6.22.0\nipython 8.12.0\nipython-genutils 0.2.0\nipywidgets 8.0.6\njedi 0.18.2\njsonschema 4.17.3\njupyter 1.0.0\njupyter-cache 0.6.1\njupyter-client 8.1.0\njupyter-console 6.6.3\njupyter-core 5.3.0\njupyter-events 0.6.3\njupyter-server 2.5.0\njupyter-server-terminals 0.4.4\njupyterlab-pygments 0.2.2\njupyterlab-widgets 3.0.7\nkaleido 0.2.1\nkiwisolver 1.4.4\nlinkify-it-py 2.0.2\nmarkdown-it-py 3.0.0\nmatplotlib 3.7.1\nmatplotlib-inline 0.1.6\nmdit-py-plugins 0.4.0\nmdurl 0.1.2\nmistune 2.0.5\nmunkres 1.1.4\nnbclassic 0.5.3\nnbclient 0.7.4\nnbconvert 7.2.9\nnbformat 5.9.0\nnest-asyncio 1.5.6\nnotebook 6.5.3\nnotebook-shim 0.2.2\nnumpy 1.23.5\npackaging 23.0\npandas 2.0.3\npandocfilters 1.5.0\nparso 0.8.3\npatsy 0.5.3\npexpect 4.8.0\npickleshare 0.7.5\npip 23.1.2\npkgutil-resolve-name 1.3.10\nplatformdirs 3.2.0\nplotly 5.15.0\nply 3.11\npooch 1.7.0\nprometheus-client 0.16.0\nprompt-toolkit 3.0.38\npsutil 5.9.4\nptyprocess 0.7.0\npure-eval 0.2.2\npyopenssl 23.1.1\npycparser 2.21\npyparsing 3.0.9\npyrsistent 0.19.3\npython-dateutil 2.8.2\npython-json-logger 2.0.7\npython-multipart 0.0.6\npytz 2023.3\npyzmq 25.0.2\nqtconsole 5.4.2\nrequests 2.28.2\nrfc3339-validator 0.1.4\nrfc3986-validator 0.1.1\nrpy2 3.5.11\nscipy 1.10.1\nseaborn 0.12.2\nsetuptools 67.6.1\nshiny 0.4.0\nshinylive 0.0.14\nsimplegeneric 0.8.1\nsip 6.7.7\nsix 1.16.0\nsniffio 1.3.0\nsoupsieve 2.3.2.post1\nstack-data 0.6.2\nstarlette 0.28.0\nstatsmodels 0.14.0\ntabulate 0.9.0\ntenacity 8.2.2\nterminado 0.17.1\ntinycss2 1.2.1\ntoml 0.10.2\ntoolz 0.12.0\ntornado 6.2\ntraitlets 5.9.0\ntyping-extensions 4.5.0\ntzdata 2023.3\ntzlocal 5.0.1\nuc-micro-py 1.0.2\nurllib3 1.26.15\nuvicorn 0.22.0\nwatchfiles 0.19.0\nwatermark 2.3.1\nwcwidth 0.2.6\nwebencodings 0.5.1\nwebsocket-client 1.5.1\nwebsockets 11.0.3\nwheel 0.40.0\nwidgetsnbextension 4.0.7\nzipp 3.15.0\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "BuffonsNeedle_files"
    ],
    "filters": [],
    "includes": {}
  }
}