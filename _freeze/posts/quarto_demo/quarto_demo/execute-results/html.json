{
  "hash": "adfef3eb840b54ff877e72b33bd9e3c2",
  "result": {
    "markdown": "---\ntitle: \"Quarto Intro\"\ndescription: Summary of useful features\ndate: 2023/06/01\ndate-modified: last-modified\n\ntitle-block-banner: true\ncategories: \n    - Quarto\n    \nimage: quarto_demo.png\n\nbibliography: iris.bib\nlink-citations: true\ncsl: apa-single-spaced.csl\n#reference-location: margin\n#citation-location: margin\n---\n\n\n# Preparation\n\nThe generic steps in data analysis is to\n\n-   Load software\n-   Load data\n    -   filter\n    -   transformations\n-   Inspect data\n-   Plot data\n\nIn this summary I follow this paradigm with very simplistic examples - primarily to illustrate quatro functionality, rather than data science.\n\n## Load packages\n\nEvery analysis comes wityh certain software requirements (and dependencies). Here we load the frequenly used `tidyverse` which is a collection of R package with many useful tools\n\n\n::: {.cell hash='quarto_demo_cache/html/load_software_0e879f4a626fa1f86cf1b17c0297acea'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nIt's best practice to record all packages\n\n::: {.callout-tip collapse=\"true\"}\n## sessionInfo\n\n\n::: {.cell hash='quarto_demo_cache/html/sessionInfo_9d76ed85bc9dad8e315aa147751b5c52'}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-apple-darwin13.4.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS/LAPACK: /Users/manke/miniconda3/envs/web/lib/libopenblasp-r0.3.21.dylib\n\nlocale:\n[1] C/UTF-8/C/C/C/C\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.2 forcats_1.0.0   stringr_1.5.0   dplyr_1.1.1    \n [5] purrr_1.0.1     readr_2.1.4     tidyr_1.3.0     tibble_3.2.1   \n [9] ggplot2_3.4.1   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] pillar_1.9.0      compiler_4.2.3    tools_4.2.3       digest_0.6.31    \n [5] timechange_0.2.0  jsonlite_1.8.4    evaluate_0.20     lifecycle_1.0.3  \n [9] gtable_0.3.3      pkgconfig_2.0.3   rlang_1.1.0       cli_3.6.1        \n[13] yaml_2.3.7        xfun_0.38         fastmap_1.1.1     withr_2.5.0      \n[17] knitr_1.42        generics_0.1.3    vctrs_0.6.1       htmlwidgets_1.6.2\n[21] hms_1.1.3         grid_4.2.3        tidyselect_1.2.0  glue_1.6.2       \n[25] R6_2.5.1          fansi_1.0.4       rmarkdown_2.14    tzdb_0.3.0       \n[29] magrittr_2.0.3    codetools_0.2-19  scales_1.2.1      htmltools_0.5.5  \n[33] colorspace_2.1-0  utf8_1.2.3        stringi_1.7.12    munsell_0.5.0    \n```\n:::\n:::\n\n:::\n\n## Load data\n\nLoading data can also be challenging. In the following we will use the pre-compiled `iris` data set for simplicity.\n\n::: callout-note\nR has many predefined data sets to illustrate data science concepts and software functionality. You can inspect more of those using `data()`.\n:::\n\n\n::: {.cell hash='quarto_demo_cache/html/load_data_fd7fd5f32b78dfcceb00c2979bdea2f7'}\n\n```{.r .cell-code}\nd <- iris\n```\n:::\n\n\n[An aside: I assign `iris` to a new data frame `d` to keep the workflow generic. But this is optional and I may also have used `iris` instead of `d` below.]{.aside}\n\n::: {.callout-caution collapse=\"true\"}\n## Unfold this callout if you want to know more about this data set.\n\nYou may refer to the original paper in [@Fisher1936] or by @Anderson1935. Those references are defined in the file `iris.bib`.\n\nBut if you are using R/Rstudio you can also use\n\n``` r\n?iris\nclass(iris)\nstr(iris)\n```\n\nNotice that this code chunk is not executed during rendering, but you can copy it conveniently from html to your clipboard.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## The iris data can also be read from the following URL.\n\nThe following code block will not be evaluated because of the parameter `eval: false`\n\n\n::: {.cell hash='quarto_demo_cache/html/load_iris_from_url_fea532124c65d20a552023bcc76b812e'}\n\n```{.r .cell-code}\nurl = 'https://iris.csv'  # choose valid link!\n\nd <- read_csv(url) %>% \n  drop_na()  # some filtering maybe necessary\n```\n:::\n\n:::\n\nMore information on additional callouts (warning, caution, important) is available [here](https://quarto.org/docs/authoring/callouts.html)\n\n## Data Inspection\n\n\n::: {#tbl-data_inspection .cell tbl-cap='A formatted table with knitr::kable' hash='quarto_demo_cache/html/tbl-data_inspection_2e94577f44078253d99efc58ab35a580'}\n\n```{.r .cell-code}\nknitr::kable(head(d))\n```\n\n::: {.cell-output-display}\n| Sepal.Length| Sepal.Width| Petal.Length| Petal.Width|Species |\n|------------:|-----------:|------------:|-----------:|:-------|\n|          5.1|         3.5|          1.4|         0.2|setosa  |\n|          4.9|         3.0|          1.4|         0.2|setosa  |\n|          4.7|         3.2|          1.3|         0.2|setosa  |\n|          4.6|         3.1|          1.5|         0.2|setosa  |\n|          5.0|         3.6|          1.4|         0.2|setosa  |\n|          5.4|         3.9|          1.7|         0.4|setosa  |\n:::\n:::\n\n\n@tbl-data_inspection is nicely formatted to show the first few observations of the iris data set. It has 150 rows and 5 columns[^1].\n\n[^1]: Note that we may have filtered the data as part of the pre-processing steps.\n\n# Descriptive statistics\n\nBelow I use panel-tabset to illustrate both text summaries and graphical summaries\n\n::: panel-tabset\n#### text\n\n\n::: {#tbl-summary .cell tbl-cap='A text summary of the data' hash='quarto_demo_cache/html/tbl-summary_3c0f0749d4db404bf4f0a5b4a3270536'}\n\n```{.r .cell-code}\nknitr::kable(summary(d))\n```\n\n::: {.cell-output-display}\n|   | Sepal.Length | Sepal.Width  | Petal.Length | Petal.Width  |      Species |\n|:--|:-------------|:-------------|:-------------|:-------------|:-------------|\n|   |Min.   :4.300 |Min.   :2.000 |Min.   :1.000 |Min.   :0.100 |setosa    :50 |\n|   |1st Qu.:5.100 |1st Qu.:2.800 |1st Qu.:1.600 |1st Qu.:0.300 |versicolor:50 |\n|   |Median :5.800 |Median :3.000 |Median :4.350 |Median :1.300 |virginica :50 |\n|   |Mean   :5.843 |Mean   :3.057 |Mean   :3.758 |Mean   :1.199 |NA            |\n|   |3rd Qu.:6.400 |3rd Qu.:3.300 |3rd Qu.:5.100 |3rd Qu.:1.800 |NA            |\n|   |Max.   :7.900 |Max.   :4.400 |Max.   :6.900 |Max.   :2.500 |NA            |\n:::\n:::\n\n\n#### correlations\n\n\n::: {.cell hash='quarto_demo_cache/html/fig-pairwise_corr_de7fd4abcb64370e01c30a909d3d8e80'}\n\n```{.r .cell-code}\nplot(d[,-5])\n```\n\n::: {.cell-output-display}\n![A graphical summary](quarto_demo_files/figure-html/fig-pairwise_corr-1.png){#fig-pairwise_corr width=672}\n:::\n:::\n\n\n#### correlations + colours\n\n\n::: {.cell hash='quarto_demo_cache/html/fig-pairwise_corr_col_4329345ba4a502e6943153602df2b8a3'}\n\n```{.r .cell-code}\nplot(d[,-5], col=d[,5])\n```\n\n::: {.cell-output-display}\n![A graphical summary with colors](quarto_demo_files/figure-html/fig-pairwise_corr_col-1.png){#fig-pairwise_corr_col width=672}\n:::\n:::\n\n:::\n\nThe summary statistics is shown in @tbl-summary and all pairwise correlations are shown in @fig-pairwise_corr and in @fig-pairwise_corr_col with colour-coded species variable. Notice that the table reference does not seem to work within tabsets.\n\n## Columns\n\nSometimes we may want to define columns\n\n::: columns\n::: {.column width=\"40%\"}\nThe average petal length is 3.76 cm and the average petal width is 1.2 cm.\n:::\n\n::: {.column width=\"20%\"}\n:::\n\n::: {.column width=\"40%\"}\nThe data dimensions is 150, 5.\n:::\n:::\n\n# Plotting with ggplot2\n\n## Coloured by species\n\n\n::: {.cell hash='quarto_demo_cache/html/fig-PL_PW_87d1d3a02917f2aff08d374de1d021ee'}\n\n```{.r .cell-code}\np <- d %>%\n  ggplot(aes(x = Petal.Width, y = Petal.Length)) + \n  geom_point(aes(color=Species), size = 3, alpha = 0.8) +\n  geom_smooth(method=\"lm\", color=\"grey\") +\n  theme_minimal() +\n  labs(title = \"Iris Data\",\n       subtitle = \"Petal Length vs Petal Width\",\n       x = \"Petal Width (cm)\",\n       y = \"Petal Length (cm)\",\n       color = \"Species\",\n       shape = \"Species\") +\n  theme_minimal() \n#  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) \n\np\nggsave('quarto_demo.png', plot=p)\n```\n\n::: {.cell-output-display}\n![Iris data (colored by Species)](quarto_demo_files/figure-html/fig-PL_PW-1.png){#fig-PL_PW width=672}\n:::\n:::\n\n\n## Facet Wrap\n\n\n::: {.cell .caption-margin hash='quarto_demo_cache/html/fig-PL_PW_facet_0d348e33ce8c6d75d51dc784c24325de'}\n\n```{.r .cell-code}\np +   \n  geom_smooth(aes(color=Species), method=\"lm\") +\n  facet_wrap(~Species)\n```\n\n::: {.cell-output-display}\n![Iris data with caption in margin](quarto_demo_files/figure-html/fig-PL_PW_facet-1.png){#fig-PL_PW_facet width=672}\n:::\n:::\n\n\n@fig-PL_PW colors species but runs regression over all samples. @fig-PL_PW_facet facets the data by species and shows also the species-specific regression lines. [Notice that in this case the caption is put in the margin. And this comment too.]{.aside}\n\nHere is just another reference to a figure way back up: @fig-pairwise_corr (But notice that it works only when the corresponding tabset panel is open).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}