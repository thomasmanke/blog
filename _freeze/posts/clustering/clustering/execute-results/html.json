{
  "hash": "c3ab12526e19d9904538d0690d315aef",
  "result": {
    "markdown": "---\ntitle: \"Clustering\"\ndate: 2023/06/09\ndate-modified: last-modified\ncategories: \n  - clustering\n  - iris\n  - shiny\n\necho: true\neval: false\ndraft: true\n\nformat:\n  html: default\n  revealjs: \n    output-file: revealjs.html\n\n#server: shiny\n---\n\n::: {.cell hash='clustering_cache/html/unnamed-chunk-1_32929b72fcb7834e08924cdfaa8a5616'}\n\n```{.r .cell-code}\nlibrary(shiny)\n```\n:::\n\n\n# Introduction\n\nThis is a shiny application. It requires a shiny server to run properly. The latter could be as part of Rstudio or some cloud server (e.g. shinyapps.io, quarto). Without it will not render properly, but I used it here to illustrate how quarto can be used to define a simple shiny app.\n\nNotice 1: For this to run it also requires rmarkdown 2.20++, but this would require downgrading\nquarto=1.3+ to quarto=1.2, and I don't want to downgrade.\nMake sure you have the appropriate environment.\n\nNotice 2: There is a `shinylive` for python and shinylive extension for quarto, which enables \n`shiny` on client side browser and without any dedicated server. See also: \n[BuffonsNeedle](posts/BuffonsNeedle/BuffonsNeedle.html)\n\n\n::: {.cell .panel-sidebar hash='clustering_cache/html/unnamed-chunk-2_dc8c5b28b6fe982c1251190319272aa5'}\n\n```{.r .cell-code}\nvars = names(iris)[-5]\nselectInput('xcol', 'x', vars)\nselectInput('ycol', 'y', vars, selected=vars[[2]])\nnumericInput('k', '#clusters', 3, min=1, max=9)\n```\n:::\n\n::: {.cell .panel-fill hash='clustering_cache/html/unnamed-chunk-3_ec30eeaeffef59d331dd90b4c1031dff'}\n\n```{.r .cell-code}\nplotOutput('plot1')\n```\n:::\n\n\nNotice that we have to define the `context` of the following code block.\n\n\n::: {.cell context='server' hash='clustering_cache/html/server_code_1ced4d1afb93da256cc2f2f1a2fb2960'}\n\n```{.r .cell-code}\nd <- reactive({\n  iris[,c(input$xcol, input$ycol)]\n})\n\noutput$plot1 <- renderPlot({\n  plot(d(), col=iris$Species)\n})\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}