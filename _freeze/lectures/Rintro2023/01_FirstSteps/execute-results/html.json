{
  "hash": "d5c35004f74c556ce1d63849adbe654e",
  "result": {
    "markdown": "---\ntitle: \"01: First Steps\"\nauthor: \"Thomas Manke\"\ndate:  \"2023-03-26\"\ncategories: \n  - R\n  - vectors\n  - sessionInfo\n  - help\nimage: images/RStudio.png\noutput: \n  html_document:\n    toc: true\n    toc_depth: 2\n    code_folding: hide   # code for which echo=TRUE will not be shown but folded\n---\n\n\n# Create R project\n\n**Best practice:**\\\nEach R project should have their dedicated directory. This directory will hold code, data, results etc.\n\n**Task**: Open a new project with \"File \\> New Project ...\"\n\nNotice the following distinction:\n\n-   When running Rstudio locally, the project directory will reside on your **local** computer.\n-   When accessing a web server, the project directory will also be on that server.\n\n**Task**: Familiarize yourself with the layout and the various panels in Rstudio.\n\n**Query**: Utilization: https://pollev.com/thomasmanke101\n\n# Console and Commands\n\nFor now, the most important panel is the so-called \"Console\" with the prompt (\"\\>\").\n\nThis is where the first interactions with the R-software will take place.\n\nThe other panels are for: output, help and other information.\n\n**Task**: In the Console try to repeat and understand the following operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n2^3        # This is a comment: try also 2**3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n1+2+3/6    # beware of precedence rules\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n\n```{.r .cell-code}\nsqrt(2)    # functions\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.414214\n```\n:::\n\n```{.r .cell-code}\nsin(pi/2)  # functions and built-in constants\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# Special values\n1/0        # R knows infinity! Try 1/Inf and 1/inf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n\n```{.r .cell-code}\n0/0        # Not a number!     Try sqrt(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN\n```\n:::\n:::\n\n\n# Command History\n\nAll R-commands are tracked in a *history*. It maybe accessed using the cursors (or the history panel in RStudio). This is extremely useful to navigate to previous commands, repeat them, or change them slightly.\n\n**Task**: Using the history, determine $\\sqrt 3$.\n\n# First help\n\nThere are various different ways to get help\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sin\n```\n:::\n\n\nUse help to find out more about: sqrt, exp or anything else of interest.\n\n# Community help\n\n-   online courses: http://software-carpentry.org/lessons, Coursera, Udacity, ...\n-   bootcamp: https://github.com/jknowles/r_tutorial_ed\n-   QuickR: http://www.statmethods.net\n-   http://stackoverflow.com, http://www.r-bloggers.com/\n\n# SessionInfo\n\nEvery language operates in a certain context and is context-dependent.\n\nSoftware depends on other software and packages.\n\nIt is important to be aware of those (often complex) dependencies.\n\nOne way to communicate this context is with the output from sessionInfo().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15)\nPlatform: x86_64-apple-darwin13.4.0 (64-bit)\nRunning under: macOS Big Sur ... 10.16\n\nMatrix products: default\nBLAS/LAPACK: /Users/manke/miniconda3/envs/web/lib/libopenblasp-r0.3.21.dylib\n\nlocale:\n[1] C/UTF-8/C/C/C/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.2.3    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.2.3       htmltools_0.5.5   yaml_2.3.7        rmarkdown_2.14   \n [9] knitr_1.42        jsonlite_1.8.4    xfun_0.38         digest_0.6.31    \n[13] rlang_1.1.0       evaluate_0.20    \n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n# Assigning values to objects\n\n**Goal**: store results of computation in new variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2*pi # pre-defined constant pi\nx         # see value of object x = show(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.283185\n```\n:::\n\n```{.r .cell-code}\nx < -2    # Careful: what's going on here?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.283185\n```\n:::\n\n```{.r .cell-code}\nx = 2  # \"=\" as in most other languages.  \nx      # x was overwritten\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nx==3   # another logical comparison (x unchanged)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx+x    # passing objects to functions (+)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n**Task**: look at the following objects and understand the differences\n\n\n::: {.cell}\n\n```{.r .cell-code}\npi \nhi\n\"hi\"\n```\n:::\n\n\n------------------------------------------------------------------------\n\n# Simple Vectors\n\nVectors illustrate how complex data structures can be built from smaller blocks. Here we learn how to create and inspect vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv=c(1,2)            # combine arguments into vector\nv                   # display v\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n\n```{.r .cell-code}\n# functions for vectors\nstr(v)              # structure of v (especially useful for long and structured objects)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:2] 1 2\n```\n:::\n\n```{.r .cell-code}\ntypeof(v)           # type of v ( ~ storage mode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nclass(v)            # class of v (determines how certain functions will work with v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nlength(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nsum(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nsummary(v)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.25    1.50    1.50    1.75    2.00 \n```\n:::\n:::\n\n\n# Accessing Vectors\n\nFrequently we need to access specific elements from a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n**Task**: access the following vector elements: v\\[1\\], v\\[2\\], v\\[3\\], v\\[1:3\\], v\\[-1\\]\n\n# Vector Generation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv=c(1,2,3,4,5)    # combining many elements can get cumbersome\nv=1:5             # more efficient\n\nv=seq(from=1, to=5, by=1) # same as before but more flexibilty\nv=seq(1,5,0.5)            # short-hand defaults\n```\n:::\n\n\n**Tasks**:\n\n-   Explore the seq() function and inspect other parameter options.\n-   Create a vector with 5 numbers equally spaced from +2 to -1.9\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2.000  1.025  0.050 -0.925 -1.900\n```\n:::\n:::\n\n\n**Task**: Understand the difference between the two vectors v1 and v2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1=1:10-1\nv2=1:(10-1)\n```\n:::\n\n\n# Vector Operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1=1:3      # = c(1,2,3)\nv2=rep(2,3) # = c(2,2,2)\n\nv1+v2      # elementwise addition\nv1*v2      # ... multiplication\nv1 > v2    # ... comparisons\nv1 %*% v2  # scalar product\n```\n:::\n\n\n**Task**: Define your own vectors and explore some numerical operations\n\n# Misc: Concepts and Pecularities\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv=1:4                    # Vector Definition\n\nv + 10                   # Recycling\nv + c(10,20)             # Recycling\nv + c(10,20,30)          # Warning != Error\n\n#v %*% c(10,20,30)        # Error = Error\n\nletters                  # built-in vector. Try LETTERS \ntypeof(letters)          # there is more than numbers\n\nnames(v)=letters[1:4]    # naming of vector elements (for convenience)\nv[\"b\"]                   # index by name\n\nrev(v)                   # reverse vectors\n```\n:::\n\n\n------------------------------------------------------------------------\n\n# Learning Curve:\n\n-   Rstudio: Starting an R project\n-   work with console\n-   simple functions (input, output), logical operations and parameters\n-   creating simple objects and assigning values\n-   inspecting objects: v, str(v), typeof(v), length(v)\n-   flexible creation of vectors\n-   vector indices and subsetting\n-   vector operations and recycling\n-   special values: Inf, NaN, NA\n-   functions can behave differently on different input: summary()\n-   see warning messages and errors\n-   getting help: ?sqrt\n-   software dependencies and the importance of sesssionInfo()\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}