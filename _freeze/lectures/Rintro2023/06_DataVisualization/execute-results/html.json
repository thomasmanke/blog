{
  "hash": "cab804942d2599f78218086b0c22098c",
  "result": {
    "markdown": "---\ntitle: \"06: Data Visualization\"\nauthor: \"Thomas Manke\"\ndate:  \"2023-03-26\"\ncategories:\n  - Scaling\n  - pheatmap\n  - PCA\n  - save figures\n---\n\n\n\n\n\n# Goal 1: Show me all the data\n\n## Scaling \n\nIt's good practice to normalize the different variables\n\n::: {.cell hash='06_DataVisualization_cache/html/scaling_e5240f9dbfc57926778dd6bbfdfc0c35'}\n\n```{.r .cell-code}\nd=iris[,-5]   # numerical iris data (without speciee) \nds=scale(d)   # scaled iris data (column-wise)\n\nbr=seq(-5,7,by=0.5)                                           # set common break points for the histograms below\nhist(d[,\"Sepal.Width\"], breaks = br)                          # illustrate scaling for specific column\nhist(ds[,\"Sepal.Width\"], breaks = br, add=TRUE, col=\"red\")    # add histogram to current plot\nlegend(\"topright\", c(\"orig\",\"scaled\"), fill=c(\"white\", \"red\"))\n```\n\n::: {.cell-output-display}\n![](06_DataVisualization_files/figure-html/scaling-1.png){width=672}\n:::\n:::\n\n\n## Heatmaps\nHeatmaps are color-coded representations of numerical matrices. \n\nTypically the rows and columns are re-ordered according to some distance measure (default: Euclidean) \nand hierarchical clustering method (default: complete) \n\nThere are many tools to draw heatmaps in R.\nHere we use the `pheatmap` package to provide this powerful functionality\n\n\n::: {.cell hash='06_DataVisualization_cache/html/pheatmap_bd2a80ac104be2b0d7504b823e14c8dd'}\n\n```{.r .cell-code}\n#install.packages(\"pheatmap\")  # That's how we install new packages - more later\nlibrary(pheatmap)              # make packaged functions available\npaste('loaded pheatmap version:', packageVersion('pheatmap'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"loaded pheatmap version: 1.0.12\"\n```\n:::\n\n```{.r .cell-code}\nds  = scale(iris[,-5])                # scaled data for heatmap\nann = data.frame(Species = iris[,5])  # meta data for annotations\n\n# explicitly set rownames to retain association between data and metadata\nrownames(ds)=rownames(iris)\nrownames(ann)=rownames(iris)\n\npheatmap(ds, \n         annotation_row = ann,\n         show_rownames = FALSE,\n         )\n```\n\n::: {.cell-output-display}\n![](06_DataVisualization_files/figure-html/pheatmap-1.png){width=672}\n:::\n:::\n\n\nThere is many more parameters for more control - if you have lots of time read \"?pheatmap\" \n\n***\n\n## Sending plots to files\nIn Rstudio, we can export figures from the \"Plots\" tab. On the console we can define a pdf file as a new device for all subsequent figures. This is usually done only *after* the image is sufficiently optimized\n\n::: {.cell hash='06_DataVisualization_cache/html/pdf_68b87a688d889c90d2ef2d09eb487718'}\n\n```{.r .cell-code}\npdf(\"output/heatmap.pdf\")                                        # similar for jpeg, png, ...\npheatmap(ds, annotation_row = ann, show_rownames = FALSE)\ndev.off()                                                 # close device = pdf file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npdf \n  3 \n```\n:::\n:::\n\n\n***\n\n# Goal 2: Show me all the data (in lower dimensions)\n\n\n::: {.cell hash='06_DataVisualization_cache/html/df2mat_2954ec1b811b7b0fa3546f0754a8731e'}\n\n```{.r .cell-code}\nM=as.matrix(iris[,-5])     # numerical data, some operations below require matrices not data frames (%*%)\ns=iris[,5]                 # species attributes (factor)\n```\n:::\n\n\n## PCA Goals\n* simplify description of data matrix $M$: data reduction & extract most important information\n* maximal variance: look for direction in which data shows maximal variation\n* minimal error: allow accurate reconstruction of original data \n\n![PCA goal](images/PCA.gif)\nfrom amoeba @ https://stats.stackexchange.com/questions/2691/making-sense-of-principal-component-analysis-eigenvectors-eigenvalues\n\n## PCA with R\n\n::: {.cell hash='06_DataVisualization_cache/html/run_pca_e7352a3eec69a5c7d3f5775ef6b8b93e'}\n\n```{.r .cell-code}\npca = prcomp(M, scale=TRUE)\n```\n:::\n\n\n**Task**: What kind of object is pca?\n\n\n::: {.cell hash='06_DataVisualization_cache/html/pca_obj_a8277ec41b2c0921d58b48bed2f1c2e4'}\n\n:::\n\n\n## Covariance Structure\n\n::: {.cell hash='06_DataVisualization_cache/html/pca_cov_edd13e7f6b8e4f4d44dc78e54f229871'}\n\n```{.r .cell-code}\nS=pca$x          # score matrix = rotated and scaled data matrix\n\npairs(S, col=s)\n```\n\n::: {.cell-output-display}\n![](06_DataVisualization_files/figure-html/pca_cov-1.png){width=672}\n:::\n\n```{.r .cell-code}\npheatmap(cov(M)) # original covariance matrix\n```\n\n::: {.cell-output-display}\n![](06_DataVisualization_files/figure-html/pca_cov-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# covariance matrix of scores is diagonal (by design)\n# --> principal components are uncorrelated\npheatmap(cov(S)) \n```\n\n::: {.cell-output-display}\n![](06_DataVisualization_files/figure-html/pca_cov-3.png){width=672}\n:::\n:::\n\n\n\nNotice that the higher components do not add much to the variance, so we may as well represent the transformed data in only the **first two dimensions**:\n\n\n::: {.cell hash='06_DataVisualization_cache/html/plot_PC1_PC2_6750204017cab61b18920b1ac8796466'}\n\n```{.r .cell-code}\nplot(S[,1:2],pch=21, bg=s)  # score-plot\n```\n\n::: {.cell-output-display}\n![](06_DataVisualization_files/figure-html/plot_PC1_PC2-1.png){width=672}\n:::\n:::\n\n\n\n***\n\n# Review\n* use heatmaps to visualize large matrices\n* data transformation: scale()\n* installing packages: pheatmap\n* exporting figures as publication-ready files: pdf()\n* dimensional reduction (PCA): prcomp()\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}