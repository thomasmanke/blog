name: Quarto Publish

on:
  workflow_dispatch:
  push:
    branches: main
    paths:
      - '**.qmd'
      - '**.Rmd'
      - '**.yml'
      - 'envs/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Set up base environment
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: envs/env.yml
          environment-name: base
          cache-environment: true

      - name: Register base kernel
        run: |
          micromamba activate base
          python -m ipykernel install --user --name "base" --display-name "Python (Base)"
          
      - name: Identify and create specialized environments
        run: |
          micromamba activate base
          
          # Start with the base environment
          SPECIALIZED_ENVS=("base:envs/env.yml")
          
          # Find all QMD files that have matching YML files
          echo "Searching for QMD files with matching YML files..."
          while IFS= read -r qmd_file; do
            # Get the directory and base name
            dir=$(dirname "$qmd_file")
            base_name=$(basename "$qmd_file" .qmd)
            
            # Check if a matching YML file exists
            yml_file="${dir}/${base_name}.yml"
            if [ -f "$yml_file" ]; then
              echo "Found matching YML for $qmd_file: $yml_file"
              
              # Add to the specialized environments list
              SPECIALIZED_ENVS+=("${base_name}:${yml_file}")
            fi
          done < <(find . -name "*.qmd" -not -path "*/\.*")
          
          # Print the discovered environments
          echo "Discovered the following specialized environments:"
          for env_spec in "${SPECIALIZED_ENVS[@]}"; do
            echo "  $env_spec"
          done
          
          # Create each specialized environment (skip the base environment which is already created)
          for env_spec in "${SPECIALIZED_ENVS[@]}"; do
            env_name="${env_spec%%:*}"
            env_file="${env_spec#*:}"
            
            # Skip the base environment
            if [ "$env_name" = "base" ]; then
              echo "Skipping base environment which is already created"
              continue
            fi
            
            echo "Creating environment $env_name from $env_file"
            # Start with the base environment
            micromamba create -n "$env_name" --file envs/env.yml
            micromamba activate "$env_name"
            
            # Add the specialized packages
            micromamba install -y --file "$env_file"
            
            # Register the kernel with a predictable name
            python -m ipykernel install --user --name "$env_name" --display-name "Python ($env_name)"
            
            # Return to base environment
            micromamba activate base
          done
          
          # List all available kernels for reference
          echo "Available Jupyter kernels:"
          jupyter kernelspec list
          
          # List all created environments
          echo "Created Micromamba environments:"
          micromamba env list

      - name: Render Quarto project
        run: |
          micromamba activate base
          quarto render
          
      - name: Upload artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        