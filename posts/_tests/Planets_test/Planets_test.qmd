---
title: Lorentz (Test)
date: 2024/03/02
date-modified: last-modified
categories: 
  - planets
  - plotly
  - shinylive
  
image: planets.png

format:
  html: default

  revealjs:
     output-file: revealjs.html 

#css: styles.css

filters:
  - shinylive
---

## Lorenz Attractor (1963)

$$
\begin{eqnarray*}
\dot{X} = a (Y - X) \\
\dot{Y} = X (b - Z) - Y \\
\dot{Z} = X Y - c Z \\
\end{eqnarray*}
$$


## The app
```{shinylive-r}
#| standalone: true

library(shiny)
library(deSolve)
library(tidyverse)

# The lorenz functions in a for deSolve can understand
Lorenz<-function(t, state, parameters) {
    with(as.list(c(state, parameters)),{
        dX <- a * (Y-X)
        dY <- X * (b-Z) - Y
        dZ <- X*Y - c*Z        
        # return the rate of change
        list(c(dX, dY, dZ))
    })
}

ui <- fluidPage( 
  titlePanel("Lorenz Attractor"),
  fluidRow(
    column(3, sliderInput("param_a", label = "a:", min = -10, max = 20, value = 10, step=0.001)),
    column(3, sliderInput("param_b", label = "b:", min = -10, max = 100, value = 28, step=0.001)),
    column(3, sliderInput("param_c", label = "c:", min = -10, max = 20, value = 8./3., step=0.001)),
    column(3, sliderInput("time", label = "Time Range:", min = 1, max = 200, value = c(1,100), step=1)),
    column(3, sliderInput("ini_n", label = "ini_n:", min = 1, max = 1000, value = 50, step=1)),
    column(3, sliderInput("ini_sd", label = "ini_sd:", min = 0, max = 10, value = 1, step=0.01)),
    column(6, sliderInput("ms", label = "ms / frame", min = 0, max = 500, value = 200, step=1)),
    tabsetPanel(
#        tabPanel("Lorenz Attractor",plotlyOutput("animated",width="600px",height="600px")),
        tabPanel("(X,Y,Z) vs Time",plotOutput("time_series")),
        tabPanel("Session Info",verbatimTextOutput("session_info"))
    )
  )
)


######
server<-function(input,output,session){

  vals <- reactiveValues()
    observe({
        parameters <- c(a = input$param_a, b = input$param_b, c = input$param_c)
        times <- seq(input$time[[1]], input$time[[2]], by = 0.01)
        state <- c(X = 1, Y = 1, Z = 1)   # single initial state

        # single solution - high time resolution
        vals$out <- ode(y = state, times = times, func = Lorenz, parms = parameters) %>%
            as.data.frame()
    })

    output$time_series <- renderPlot({
        vals$out %>% 
          pivot_longer(-time, names_to= "coord" , values_to = "value") %>%
          ggplot(aes(x = time, y = value)) +
          geom_path() +
          facet_wrap(~coord)
    })

    output$session_info <- renderPrint( sessionInfo() )

}

shinyApp(ui = ui, server = server)
```


## References

-   [Wikipedia](https://en.wikipedia.org/wiki/Elliptic_orbit)
-   [DT and shiny](https://rstudio.github.io/DT/shiny.html)
-   [shiny reactivity](https://shiny.posit.co/r/getstarted/shiny-basics/lesson6/)
-   [plotly with R](https://www.rdocumentation.org/packages/plotly/versions/4.10.4/topics/plot_ly)
-   [shinylive-r](https://github.com/coatless-quarto/r-shinylive-demo)

